spring:
  application:
    name: audiance-backend

  profiles:
    active: ${SPRING_PROFILE:local}

  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:testdb}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}
    driver-class-name: ${DB_DRIVER:org.h2.Driver}

  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    show-sql: false
    properties:
      hibernate:
        dialect: ${DB_DIALECT:org.hibernate.dialect.H2Dialect}
        format_sql: true

  h2:
    console:
      enabled: true

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour

  security:
    oauth2:
      client:
        registration:
          spotify:
            client-id: ${SPOTIFY_CLIENT_ID}
            client-secret: ${SPOTIFY_CLIENT_SECRET}
            scope:
              - user-read-email
              - user-read-private
              - playlist-modify-public
              - playlist-modify-private
            authorization-grant-type: authorization_code
            redirect-uri: ${FRONTEND_URL:http://127.0.0.1:3000}/auth/callback
        provider:
          spotify:
            authorization-uri: https://accounts.spotify.com/authorize
            token-uri: https://accounts.spotify.com/api/token
            user-info-uri: https://api.spotify.com/v1/me

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
    expiration: 86400000 # 24 hours

  frontend:
    url: ${FRONTEND_URL:http://127.0.0.1:3000}

  huggingface:
    api-key: ${HUGGINGFACE_API_KEY}
    model-url: https://api-inference.huggingface.co/models/THUDM/glm-4-9b-chat
    timeout: 30000 # 30 seconds

  rate-limit:
    user-daily-limit: 5     # Per user per day (conservative for free tier)
    global-daily-limit: 50  # Total across all users
    enabled: ${RATE_LIMIT_ENABLED:true}

# Server Configuration
server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

# Logging
logging:
  level:
    com.audiance: DEBUG
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# API Documentation
springdoc:
  api-docs:
    path: /api/docs
  swagger-ui:
    path: /api/swagger-ui.html
    operationsSorter: method

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production

  datasource:
    url: ${DATABASE_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

logging:
  level:
    com.audiance: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN